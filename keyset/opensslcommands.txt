Signing operations
#create Private Key
openssl genpkey -algorithm RSA -out private_key.pem
#create Public key from Private key
openssl rsa -pubout -in private_key.pem -out public_key.pem
#signing of image 
openssl dgst -sha256 -sign private_key.pem -out signature.bin -binary -hex < CyberSec.srec
#hash of signature
openssl dgst -sha256 -hex -out hash.txt input_file.txt



ECC P256v1 format 

ECC publicKey X and Y coordinates example : 
pub:

mode : 04 Uncompressed format 
	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32

X : 69	47	7b	fa	5a	5f	08	84	25	34	bd	24	79	42	b2	9a	b6	e4	db	7a	37	ca	c7	a0	b6	b7	49	0d	6c	01	32	1a

Y : f1	ab	c6	db	80	90	70	52	40	55	6f	c1	62	9a	b3	d5	4c	4e	ac	78	5f	62	74	e1	8d	64	2c	d4	40	c0	bf	77


Signature P256v1 format example : 
.txt
    0:d=0  hl=2 l=  68 cons: SEQUENCE
   R-> 2:d=1  hl=2 l=  32 prim:  INTEGER           :45D6FADE2178DCAA4C7C0F56BEAD287E998A5B979D81BC895BF4C41045CC6565
   S->36:d=1  hl=2 l=  32 prim:  INTEGER           :345E1AD15438EE2B74424A6ED0A05353A7CC8149E956A6B8D208E8BACA49A94F

binary format :

30 44 02 20 |45 d6 fa de 21 78 dc aa 4c 7c 0f 56 be ad 28 7e 99 8a 5b 97 9d 81 bc 89 5b f4 c4 10 45
cc 65 65| 02 20 |34 5e 1a d1 54 38 ee 2b 74 42 4a 6e d0 a0 53 53 a7 cc 81 49 e9 56 a6 b8 d2 08 e8 ba
ca 49 a9 4f|  

CRC must be done before the signing 
TODO: Postbuild image signing 
1. Create data dump from .srec -> â”€ srec_cat CyberSec_crc.srec -Motorola -offset -0x08000000 -o output_bin.bin -Binary 
2. Create a hash over the signed area SHA256. -> openssl dgst -sha256 -binary -out output_hash.bin output_bin.bin
3. Perform signing and output .bin file -> openssl dgst -sha256 -sign privatekey.pem -out signature_bin.bin -binary < output_hash.bin
5. Verify signature as a test step -> openssl dgst -sha256 -verify publickey.pem -signature signature_bin.bin output_hash.bin
6. Create new .srec file that will be appended with signed data(use Srec and add offset to the end).. 
	-srec_cat signed_hash.bin -Binary -offset 0x0800FFE0 -o signed_hash.srec -Motorola
	-srec_cat ./../Debug/CyberSec_crc.srec -Motorola signed_hash.srec -Motorola -o CyberSec_signed.srec -Motorola

TODO: Test the signature verification->Extract the hash value from signature by using public key and compare it with calculated hash value.


TODO : Header Creation with SW version and CRC location

Header struct 
typedef struct {
    uint8_t version_major;
    uint8_t version_minor;
    uint8_t version_patch;
    uint32_t release_date;
    uint32_t crc_value;
} Header;

Header header __attribute__((section(".infoblock"))); /*Location to the section */

/*Section inside of linker script */
/* Your existing linker script code here */

.infoblock :
{
    *(.infoblock)
} > ROM : 0x00800FFFF

/* Your existing linker script code here */